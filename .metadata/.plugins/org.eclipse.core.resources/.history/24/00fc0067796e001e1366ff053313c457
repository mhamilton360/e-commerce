package com.ims.productservice.service;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ims.productservice.entity.Product;
import com.ims.productservice.exception.ProductServiceCustomException;
import com.ims.productservice.model.ProductRequest;
import com.ims.productservice.model.ProductResponse;
import com.ims.productservice.repository.ProductRepository;

import lombok.extern.log4j.Log4j2;

@Service
@Log4j2
public class ProductServiceImpl implements ProductService {
	
	@Autowired
	private ProductRepository productRepository;

	@Override
	public long addProduct(ProductRequest productRequest) {
		log.info("Adding Product...");

		Product product = Product.builder()
				.name(productRequest.getName())
				.quantity(productRequest.getQuantity())
				.price(productRequest.getPrice())
				.build();
		
		productRepository.save(product);
		
		log.info("Product Created...");
		return product.getProductId();
	}

	@Override
	public ProductResponse getProductById(long productId) {
		log.info("Get the product for productId: {}", productId);
		
		Product prduct = productRepository.findById(productId)
				.orElseThrow(
						() -> new ProductServiceCustomException("Product not found for id: " + productId, "PRODUCT_NOT_FOUND"));
		
		ProductResponse productResponse = new ProductResponse();
		BeanUtils.copyProperties(prduct, productResponse);
		
		return productResponse;
	}
	
	@Override
	public void reduceQuantity(long productId, long quantity) {
		log.info("Reduce Quantity {} and for Id: {}", quantity, productId);
		
		Product product 
			= productRepository.findById(productId)
			.orElseThrow(() -> new ProductServiceCustomException(
					"Product with given Id not found", 
					"PRODUCT_NOT_FOUND"
			));
		
		if(product.getQuantity() < quantity) {
			throw new ProductServiceCustomException(
					"Product does not have sufficient quantity",
					"INSUFFICIENT_QUANTITY"
			);
		}
		
		product.setQuantity(product.getQuantity() - quantity);
		productRepository.save(product);
		
		log.info("Product Quantity updated successfully");
	}

	@Override
	public void updatePrice(long id, long price) {
		
		ProductResponse product = productRepository.findById(id);
		product.setPrice(price);

		
	}

}
